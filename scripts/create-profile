#!/usr/bin/perl -wT
use strict;
use warnings;

# $Id$

use File::Basename;

if ( $#ARGV > 1 ) {
	&usage();
	exit 1;
}

my $output;

MAIN: {
	my $inputFile = $ARGV[0];

	if ( $#ARGV == 1 ) {
		my $outputFile = $ARGV[1];
		$outputFile =~ m/^([[:alnum:]\/]+)$/ or die "Bad output filename\n";
		open(OUTFILE, ">$1");
		$output = *OUTFILE;
	}
	else {
		$output = *STDOUT;
	}

	&process_profile( $inputFile );

	if ( $#ARGV == 1 ) {
		close(OUTFILE);
	}
}

sub usage {
	print "usage: " . basename( $0 ) . " <filename> [<outputfile>]\n";
}

sub process_profile {
	my ( $inputFile ) = @_;

	open( my $fileHandle, "<", $inputFile ) 
		or die "Cannot find profile $inputFile\n";

	while( <$fileHandle> )
	{
		if ( /^\@include[ \t]+.+$/ ) { 
			chomp;
			my @include_line = split(/[ \t]+/);
			my $include_file = dirname( $inputFile ) . '/' . $include_line[1];
			&process_profile( $include_file );
		}
		elsif ( $_ !~ /^#[ \t]*\$Id[:\$]/ ) { 
			print $output "$_";
		}
	}
	close( $fileHandle );
}

__END__

=head1 NAME

create-profile - creates a normalized profile

=head1 SYNOPSIS

B<create-profile> I<filename> [I<outputfile>]

=head1 DESCRIPTION

B<create-profile> takes a profile template containing @include tokens and 
writes a normalized profile to the specified output file or on the standard 
output.

=head1 SEE ALSO

perl(1)

=head1 AUTHOR

Fletcher Nichol
