#!/usr/bin/perl -w
use strict;
use warnings;

##
# create-profile - creates a normalized profile or plist
#
# Author: Fletcher Nichol
# $Id$
##

use Getopt::Long;
use Pod::Usage;
use File::Basename;

# command line options
my %Options = ();

# profile variable name/values
my %Vars = ();

# reserved profile keywords that are not considered variables
my $RESERVED_KEYWORDS = "pkg|obpf_patch|user|group|prescript|postscript";


MAIN: {
	&parse_opts();

	my $input_file = $ARGV[0];

	my $output = &output_open();

	if ( exists $Options{'plist'} ) {
		&process_plist( $input_file, $output );
	}
	else {
		&process_profile( $input_file, $output );
	}

	close($output);
}


sub parse_opts {
	GetOptions(  \%Options, "help|?", "man", "plist|l" ) or pod2usage(2);

	# prints usage if --help option is specified
	pod2usage( 1 )  if ( exists $Options{help} );

	# prints a manpage if --man option is specified
	pod2usage( -verbose => 2 )  if ( exists $Options{man} );

	# if there are no files given, then exit
	pod2usage("$0: no files given." )  if ( ( @ARGV == 0 ) && ( -t STDIN) );
}


sub output_open {
	my $output;

	if ( $#ARGV == 1 ) {
		open( OUTFILE, ">" . $ARGV[1] );
		$output = *OUTFILE;
	}
	else {
		$output = *STDOUT;
	}

	return $output;
}


sub process_profile {
	my ( $input_file, $output ) = @_;
	my @multiple_lines = ();

	open( my $file_handle, "<$input_file" ) 
		or die "Cannot find profile $input_file\n";

	while( <$file_handle> ) {
		chomp;

		# if there is a line continuation char `\', then add to $multiple_lines
		if ( /^[^#]/ && /\\$/ ) {
			push( @multiple_lines, $_ );
			next;
		}

		&process_profile_vars( \$_, $output, @multiple_lines );

		if ( /^\@include[ \t]+.+$/ ) { 
			my @include_line = split( /[ \t]+/ );
			my $include_file = dirname( $input_file ) . '/' . $include_line[1];
			&process_profile( $include_file, $output );
		}
		elsif ( $_ !~ /^#[ \t]*\$Id[:\$]/ && scalar(@multiple_lines) == 0) { 
			print $output "$_\n";
		}
		@multiple_lines = ();
	}
	close( $file_handle );
}


sub process_plist {
	my ( $input_file, $output ) = @_;

	open( my $file_handle, "<$input_file" ) 
		or die "Cannot find profile $input_file\n";

	while ( <$file_handle> ) {
		chomp;

		&process_plist_vars( \$_, $output );

		if ( /^\@include[ \t]+.+$/ ) { 
			my @include_line = split( /[ \t]+/ );
			my $include_file = dirname( $input_file ) . '/' . $include_line[1];
			&process_plist( $include_file, $output );
		}
		elsif ( $_ !~ /^#[ \t]*\$Id[:\$]/ ) { 
			print $output "$_\n";
		}
	}
	close( $file_handle );
}


sub process_profile_vars {
	my ( $line, $output, @multiple_lines ) = @_;
	my $var_line = $$line;

	if ( scalar(@multiple_lines) > 0 ) {
		# re-initialize this line to be empty
		$var_line = '';

		# push the last line onto the multiple line stack
		push( @multiple_lines, $$line );

		# run each line, replace all variable tokens, and then print it out
		foreach my $m_line (@multiple_lines) {
			foreach my $key (keys %Vars) {
				my $val = $Vars{"$key"};
				$m_line =~ s/\$\{$key\}/$val/g;
			}
			print $output "$m_line\n";
			$m_line =~ s/\\$//;
			$var_line .= $m_line;
		}
	}
	else {
		# if this is a single line, then replace all variable tokens
		foreach my $key (keys %Vars) {
			my $val = $Vars{"$key"};
			$$line =~ s/\$\{$key\}/$val/g;
			$var_line = $$line;
		}
	}

	#
	# if the line contains a "variable" (not a keyword line or comment), then
	# save it
	#
	if ( $var_line !~ /^($RESERVED_KEYWORDS)[\s]+/ && 
			$var_line =~ /^[^@#]([^\s]+)[\s]+.*$/ ) {

		my $var = my $val = $var_line;

		$var =~ s/^([^\s]+)[\s]+.*$/$1/;
		$val =~ s/^([^\s]+)[\s]+(.*)$/$2/;

		# compress values/arguments to be seperated by one space
		$val =~ s/[\s]{2,}/ /g;

		# save the current var=val pair
		$Vars{"$var"} = $val;

		# add a convienience variable os ${osrev-short} which strips the period
		if ( $var eq "osrev" ) {
			my $osrev_short = $val;
			$osrev_short =~ s/\.//;
			$Vars{"osrev-short"} = $osrev_short;
		}
	}
}


sub process_plist_vars {
	my ( $line, $output ) = @_;

	# replace all variable tokens
	foreach my $key (keys %Vars) {
		my $val = $Vars{"$key"};
		$$line =~ s/\$\{$key\}/$val/g;
	}

	# if the line contains a "variable", then save it
	if ( $$line !~ /^(dir|file|patch)[\s]+/ &&
			$$line =~ /^[^@#]([^\s]+)[\s]+.*$/ ) {
		my $var = my $val = $$line;

		$var =~ s/^([^\s]+)[\s]+.*$/$1/;
		$val =~ s/^([^\s]+)[\s]+(.*)$/$2/;

		# compress values/arguments to be seperated by one space
		$val =~ s/[\s]{2,}/ /g;

		# save the current var=val pair
		$Vars{"$var"} = $val;
	}
}


__END__


=head1 NAME

create-profile - creates a normalized profile or plist

=head1 SYNOPSIS

B<create-profile> [B<-l>] I<filename> [I<outputfile>]

=head1 DESCRIPTION

B<create-profile> takes a profile or plist template containing @include 
tokens and writes a normalized profile to the specified output file or on 
the standard output.

=head1 OPTIONS

=over 4

=item B<--plist>, B<-l>

parses I<filename> as a plist template

=back

=head1 SEE ALSO

perl(1)

=head1 AUTHOR

Fletcher Nichol
