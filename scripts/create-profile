#!/usr/bin/perl -w
use strict;
use warnings;

##
# create-profile - creates a normalized profile or plist
#
# Author: Fletcher Nichol
# $Id$
##

use Getopt::Long;
use Pod::Usage;
use File::Basename;

# command line options
my %Options = ();


MAIN: {
	&parse_opts();

	my $input_file = $ARGV[0];

	my $output = &output_open();
	&process_profile( $input_file, $output );
	close($output);
}


sub parse_opts {
	GetOptions(  \%Options, "help|?", "man" ) or pod2usage(2);

	# prints usage if --help option is specified
	pod2usage( 1 )  if ( exists $Options{help} );

	# prints a manpage if --man option is specified
	pod2usage( -verbose => 2 )  if ( exists $Options{man} );

	# if there are no files given, then exit
	pod2usage("$0: no files given." )  if ( ( @ARGV == 0 ) && ( -t STDIN) );
}


sub output_open {
	my $output;

	if ( $#ARGV == 1 ) {
		open( OUTFILE, ">" . $ARGV[1] );
		$output = *OUTFILE;
	}
	else {
		$output = *STDOUT;
	}

	return $output;
}


sub process_profile {
	my ( $input_file, $output ) = @_;

	open( my $file_handle, "<$input_file" ) 
		or die "Cannot find profile $input_file\n";

	while( <$file_handle> )
	{
		if ( /^\@include[ \t]+.+$/ ) { 
			chomp;
			my @include_line = split(/[ \t]+/);
			my $include_file = dirname( $input_file ) . '/' . $include_line[1];
			&process_profile( $include_file, $output );
		}
		elsif ( $_ !~ /^#[ \t]*\$Id[:\$]/ ) { 
			print $output "$_";
		}
	}
	close( $file_handle );
}


__END__


=head1 NAME

create-profile - creates a normalized profile or plist

=head1 SYNOPSIS

B<create-profile> [B<-p>] [B<-l>] I<filename> [I<outputfile>]

=head1 DESCRIPTION

B<create-profile> takes a profile or plist template containing @include 
tokens and writes a normalized profile to the specified output file or on 
the standard output.

=head1 OPTIONS

=over 4

=item B<--profile>, B<-p>

parses I<filename> as a profile template. This is the default behavior.

=item B<--plist>, B<-l>

parses I<filename> as a plist template

=back

=head1 SEE ALSO

perl(1)

=head1 AUTHOR

Fletcher Nichol
