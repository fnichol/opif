#!/bin/sh

##
# install.site.sub - user-created set install script functions
#
# Author: Fletcher Nichol
# $Id$
##

Echo=/bin/echo
Egrep=/usr/bin/egrep
Find=/usr/bin/find
Ftp=/usr/bin/ftp
Groupadd=/usr/sbin/groupadd
Nawk=/usr/bin/nawk
Patch=/usr/bin/patch
Pkg_add=/usr/sbin/pkg_add
Pkg_info=/usr/sbin/pkg_info
Sed=/usr/bin/sed
Tee=/usr/bin/tee
Tr=/usr/bin/tr
Useradd=/usr/sbin/useradd
Usermod=/usr/sbin/usermod
Xargs=/usr/bin/xargs

Echo_msg=$Echo
Fetch_cmd="$Ftp -V -m"

Info="===>"
Info_detail=">>"
Info_error=">>>>"

Install_site_log=/var/log/install.site.log


i_printInfo()
{
	[ -z "$1" -o -z "$2" ] && return 1
	local prefix="$1"
	shift
	local msg="$@"

	$Echo_msg "$prefix" "$msg" | $Tee -a $Install_site_log
}


infoMsg()
{
	[ -z "$1" ] && return 1
	local msg="$1"

	i_printInfo "$Info" "$msg"
}


infoDetail()
{
	[ -z "$1" ] && return 1
	local msg="$1"

	i_printInfo "$Info_detail" "$msg"
}


infoError()
{
	[ -z "$1" ] && return 1
	local msg="$1"

	i_printInfo "$Info_error" "$msg"
}


getProfileVar()
{
	[ -z "$1" ] && return 1
	local var="$1"

	${SI_CONFIG_DIR}/find-profile-var --variable=$var $PROFILE
	return $?
}


getKeywordList()
{
	[ -z "$1" ] && return 1
	local keyword="$1"

	local list="`$Egrep \"^@$keyword[[:space:]]+\" $PROFILE | \
		$Sed -e \"s|^@$keyword[[:space:]]\{1,\}||\" | $Tr '\n' ',' | \
		$Sed -e 's|,$|\\\|' | $Tr '\\\' '\n'`"

	if [ -n "$list" ]; then
		echo "$list"
		return 0
	else
		return 10
	fi
}


fetchFile()
{
	[ -z "$1" -o -z "$2" ] && return 1
	local file="$1"
	shift
	local sites="$@"

	for site in $sites; do
		infoDetail "${site}${file}."
		if $Fetch_cmd ${site}${file}; then
			# file has been successfully downloaded
			return 0;
		fi
	done
	
	# if we make it this far, then no suitable site was found for the file
	infoError "File $file could not be downloaded from site list=[${sites}]"
	return 10
}


i_execScripts()
{
	[ -z "$1" ] && return 1
	[ "$1" != "pre" -a "$1" != "post" ] && return 2
	local prefix="$1"

	local scripts="`getKeywordList ${prefix}script | $Tr ',' ' '`"

	if [ -n "$scripts" ]; then
		infoMsg "Executing ${prefix}-scripts ..."
	else
		infoMsg "No ${prefix}-scripts"
	fi

	for script in $scripts; do
		infoDetail "Script ${SI_CONFIG_DIR}/$script"
		. ${SI_CONFIG_DIR}/$script
	done
}


execPrescripts()
{
	i_execScripts pre
}


execPostscripts()
{
	i_execScripts post
}


exportPkgPath()
{
	PKG_PATH=`getProfileVar pkg_sites | $Tr ' ' ':'`
	export PKG_PATH
}


pkgAdd()
{
	[ -z "$1" ] && return 1
	local pkg="$1"

	infoDetail "Installing $pkg"
	if ! $Pkg_add $pkg; then
		infoError "Package $pkg could not be installed."
	fi
}


loadModules()
{
	infoMsg "Loading modules ..."

	MODULES="`getKeywordList module | $Tr ',' ' '`"

	for module in core $MODULES; do
		infoDetail "Loading module $module"
		. ${SI_CONFIG_DIR}/${module}.module
	done

	infoMsg "Loading modules complete."
}


i_execPrePostStageModules()
{
	[ -z "$1" -o -z "$2" ] && return 1
	[ "$1" != "pre" -a "$1" != "post" ] && return 2
	[ "$2" != "stage1" -a "$2" != "stage2" -a "$2" != "stage3" ] && return 3
	local prefix="$1"
	local stage="$2"

	for module in core $MODULES; do
		local func="${module}_${prefix}_${stage}"
		if typeset -f $func > /dev/null; then
			eval $func
		fi
	done
}


i_execStageModules()
{
	[ -z "$1" ] && return 1
	[ "$1" != "stage1" -a "$1" != "stage2" -a "$1" != "stage3" ] && return 2
	local stage="$1"

	for module in core $MODULES; do
		local func="${module}_${stage}"
		if typeset -f $func > /dev/null; then
			eval $func
		fi
	done
}


execStage1()
{
	i_execPrePostStageModules pre stage1

	i_execStageModules stage1

	i_execPrePostStageModules post stage1
}


execStage2()
{
	i_execPrePostStageModules pre stage2

	i_execStageModules stage2

	i_execPrePostStageModules post stage2
}


execStage3()
{
	i_execPrePostStageModules pre stage3

	i_execStageModules stage3

	i_execPrePostStageModules post stage3
}
