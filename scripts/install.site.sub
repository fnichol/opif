#!/bin/sh

##
# install.site.sub - user-created set install script functions
#
# Author: Fletcher Nichol
# $Id$
##

Echo=/bin/echo
Egrep=/usr/bin/egrep
Find=/usr/bin/find
Ftp=/usr/bin/ftp
Groupadd=/usr/sbin/groupadd
Nawk=/usr/bin/nawk
Obpf=/usr/local/bin/obpf
Patch=/usr/bin/patch
Pkg_add=/usr/sbin/pkg_add
Pkg_info=/usr/sbin/pkg_info
Sed=/usr/bin/sed
Tee=/usr/bin/tee
Tr=/usr/bin/tr
Useradd=/usr/sbin/useradd
Xargs=/usr/bin/xargs

Echo_msg=$Echo
Fetch_cmd="$Ftp -V -m"

Info="===>"
Info_detail=">>"
Info_error=">>>>"

Install_site_log=/var/log/install.site.log


i_printInfo()
{
	[ -z "$1" -o -z "$2" ] && return 1
	local prefix="$1"
	shift
	local msg="$@"

	$Echo_msg "$prefix" "$msg" | $Tee -a $Install_site_log
}


infoMsg()
{
	[ -z "$1" ] && return 1
	local msg="$1"

	i_printInfo "$Info" "$msg"
}


infoDetail()
{
	[ -z "$1" ] && return 1
	local msg="$1"

	i_printInfo "$Info_detail" "$msg"
}


infoError()
{
	[ -z "$1" ] && return 1
	local msg="$1"

	i_printInfo "$Info_error" "$msg"
}


getProfileVar()
{
	[ -z "$1" ] && return 1
	local var="$1"

	${SI_CONFIG_DIR}/find-profile-var --variable=$var $PROFILE
	return $?
}


getKeywordList()
{
	[ -z "$1" ] && return 1
	local keyword="$1"

	local list="`$Egrep \"^$keyword[[:space:]]+\" $PROFILE | \
		$Sed -e \"s|^$keyword[[:space:]]\{1,\}||\" | $Tr '\n' ',' | \
		$Sed -e 's|,$|\\\|' | $Tr '\\\' '\n'`"

	if [ -n "$list" ]; then
		echo "$list"
		return 0
	else
		return 10
	fi
}


fetchFile()
{
	[ -z "$1" -o -z "$2" ] && return 1
	local file="$1"
	shift
	local sites="$@"

	for site in $sites; do
		infoDetail "${site}${file}."
		if $Fetch_cmd ${site}${file}; then
			# file has been successfully downloaded
			return 0;
		fi
	done
	
	# if we make it this far, then no suitable site was found for the file
	infoError "File $file could not be downloaded from site list=[${sites}]"
	return 10
}


i_execScripts()
{
	[ -z "$1" ] && return 1
	[ "$1" != "pre" -a "$1" != "post" ] && return 2
	local prefix="$1"

	local scripts="`getKeywordList ${prefix}script | $Tr ',' ' '`"

	if [ -n "$scripts" ]; then
		infoMsg "Executing ${prefix}-scripts ..."
	else
		infoMsg "No ${prefix}-scripts"
	fi

	for script in $scripts; do
		infoDetail "Script ${SI_CONFIG_DIR}/$script"
		. ${SI_CONFIG_DIR}/$script
	done
}


execPrescripts()
{
	i_execScripts pre
}


execPostscripts()
{
	i_execScripts post
}


patchSystemFiles()
{
	infoMsg "Patching system files ..."

	local patchfiles="`$Find ${MNTROOT}/tmp/patchfiles -type f -name *.patch | \
		$Xargs`"

	for patchfile in $patchfiles; do
		infoDetail "Patching with $patchfile"
		cd ${MNTROOT}/
		if ! $Patch -s -p1 < $patchfile; then
			infoError "Patchfile $patchfile was not properly processed."
		fi
	done
}


applyOSPatches()
{
	infoMsg "Applying OS patches ..."

	if ! $Pkg_info | $Nawk '{print $1}' | $Egrep '^obpf-' > /dev/null; then
		infoError "Package obpf must be installed for OS patching to work."
		return 50
	fi

	local obpf_sites="`getProfileVar obpf_sites | $Tr ' ' ':'`"
	local patches="`getKeywordList obpf_patch | $Tr ',' ' '`"

	HOME=/root $Obpf --backup=no --pack=no --force \
		--patchurl="$obpf_sites" --install $patches
}


i_exportPkgPath()
{
	PKG_PATH=`getProfileVar pkg_sites | $Tr ' ' ':'`
	export PKG_PATH
}


addPackages()
{
	infoMsg "Install packages ..."

	i_exportPkgPath
	if [ -z "$PKG_PATH" ]; then
		infoError "Environment variable PKG_PATH was not properly set."
	fi

	packages="`getKeywordList pkg | $Tr ',' ' '`"
	for pkg in $packages; do
		infoDetail "Installing $pkg"
		if ! $Pkg_add $pkg; then
			infoError "Package $pkg could not be installed."
		fi
	done
}


i_addGroups()
{
	infoMsg "Adding groups ..."

	getKeywordList group | $Tr ',' '\n' | while read user_line; do
		local group="`$Echo $user_line | $Nawk -F':' '{ print $1 }'`"
		local gid="`$Echo $user_line | $Nawk -F':' '{ print $3 }'`"

		infoDetail "Group ${group}:${gid}"

		if ! $Groupadd -g $gid $group; then
			infoError "Group $group could not be added."
		fi
	done
}


i_addUsers()
{
	infoMsg "Adding users ..."

	getKeywordList user | $Tr ',' '\n' | while read user_line; do
		local user="`$Echo $user_line | $Nawk -F':' '{ print $1 }'`"
		local password="`$Echo $user_line | $Nawk -F':' '{ print $2 }'`"
		local uid="`$Echo $user_line | $Nawk -F':' '{ print $3 }'`"
		local gid="`$Echo $user_line | $Nawk -F':' '{ print $4 }'`"
		local comment="`$Echo $user_line | $Nawk -F':' '{ print $5 }'`"
		local home="`$Echo $user_line | $Nawk -F':' '{ print $6 }'`"
		local shell="`$Echo $user_line | $Nawk -F':' '{ print $7 }'`"

		if [ "$password" = "*" ]; then
			local password_str=""
		else
			local password_str="-p $password"
		fi

		infoDetail "User ${user}:${uid}:${gid}"

		if ! $Useradd $password_str -u $uid -g $gid -c "$comment" \
				-d "$home" -m -s $shell $user; then
			infoError "User $user could not be added."
		fi
	done
}


addUsersAndGroups()
{
	i_addGroups
	i_addUsers
}


loadModules()
{
	echo "hi"
}


execStage1()
{
	applyOSPatches
	patchSystemFiles
}


execStage2()
{
	addPackages
}


execStage3()
{
	addUsersAndGroups
}
