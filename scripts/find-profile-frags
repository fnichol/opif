#!/usr/bin/perl -w
use strict;
use warnings;

##
# find-profile-frags - returns a list of profile source files for given profile
#
# Author: Fletcher Nichol
# $Id$
##

use Getopt::Long;
use Pod::Usage;
use File::Basename;

# command line options
my %Options = ();

# profile variable name/values
my %Vars = ();

# reserved profile keywords that are not considered variables
my $RESERVED_KEYWORDS = "pkg|obpf_patch|user|group|prescript|postscript";


MAIN: {
	&parse_opts();

	my $input_file = $ARGV[0];

	&process_profile( $input_file );

	print "\n";
}


sub parse_opts {
	GetOptions(  \%Options, "help|?", "man" ) or pod2usage(2);

	# prints usage if --help option is specified
	pod2usage( 1 )  if ( exists $Options{help} );

	# prints a manpage if --man option is specified
	pod2usage( -verbose => 2 )  if ( exists $Options{man} );

	# if there are no files given, then exit
	pod2usage("$0: no files given." )  if ( ( @ARGV == 0 ) && ( -t STDIN) );
}


sub process_profile {
	my ( $input_file ) = @_;

	print "$input_file ";

	open( my $file_handle, "<$input_file" ) 
		or die "Cannot find profile $input_file\n";

	while( <$file_handle> )
	{
		&process_vars( \$_ );

		if ( /^\@include[ \t]+.+$/ ) { 
			chomp;
			my @include_line = split(/[ \t]+/);
			my $include_file = dirname( $input_file ) . '/' . $include_line[1];
			&process_profile( $include_file );
		}
	}
	close( $file_handle );
}


sub process_vars {
	my ( $line, $output ) = @_;

	# replace all variable tokens
	foreach my $key (keys %Vars) {
		my $val = $Vars{"$key"};
		$$line =~ s/\$\{$key\}/$val/g;
	}

	# if the line contains a "variable", then save it
	if ( $$line !~ /^($RESERVED_KEYWORDS)[\s]+/ &&
			$$line =~ /^[^@#]([^\s]+)[\s]+.*$/ ) {
		my $var = my $val = $$line;

		$var =~ s/^([^\s]+)[\s]+.*$/$1/;
		$val =~ s/^([^\s]+)[\s]+(.*)$/$2/;

		chomp( $var );
		chomp( $val );

		# compress values/arguments to be seperated by one space
		$val =~ s/[\s]{2,}/ /g;

		# save the current var=val pair
		$Vars{"$var"} = $val;

		# add a convienience variable os ${osrev-short} which strips the period
		if ( $var eq "osrev" ) {
			my $osrev_short = $val;
			$osrev_short =~ s/\.//;
			$Vars{"osrev-short"} = $osrev_short;
		}
	}
}


__END__


=head1 NAME

find-profile-frags - returns a list of profile source files for given profile

=head1 SYNOPSIS

B<find-profile-frags> I<filename>

=head1 DESCRIPTION

B<find-profile-frags> takes a profile template containing @include tokens and 
outputs a list of files that are involved in creating the normalized profile.

=head1 SEE ALSO

perl(1)

=head1 AUTHOR

Fletcher Nichol
